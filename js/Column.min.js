const DIALECT_TYPE_MAP={mysql:{int:"INT",bigint:"BIGINT",varchar:"VARCHAR",boolean:"TINYINT(1)",tinyint1:"TINYINT(1)",text:"TEXT",datetime:"DATETIME",timestamp:"TIMESTAMP",float:"FLOAT",double:"DOUBLE",decimal:"DOUBLE",enum:"ENUM",set:"SET"},postgresql:{int:"INTEGER",bigint:"BIGINT",varchar:"CHARACTER VARYING",boolean:"BOOLEAN",tinyint1:"BOOLEAN",text:"TEXT",datetime:"TIMESTAMP",timestamp:"TIMESTAMP",float:"REAL",double:"DOUBLE PRECISION",decimal:"NUMERIC",enum:"TEXT",set:"TEXT"},sqlite:{int:"INTEGER",bigint:"INTEGER",varchar:"NVARCHAR",boolean:"BOOLEAN",tinyint1:"BOOLEAN",text:"TEXT",datetime:"DATETIME",timestamp:"TIMESTAMP",float:"REAL",double:"REAL",decimal:"REAL",enum:"TEXT",set:"TEXT"},sqlserver:{int:"INT",bigint:"BIGINT",varchar:"NVARCHAR",boolean:"BIT",tinyint1:"BIT",text:"NVARCHAR(MAX)",datetime:"DATETIME",timestamp:"DATETIME2",float:"FLOAT",double:"FLOAT",decimal:"DECIMAL",enum:"NVARCHAR",set:"NVARCHAR"}};class Column{constructor(e,t="VARCHAR",i="",s=!1,l="",a=!1,n=!1,r="",o=""){t.toUpperCase().indexOf("BIGINT")&&""==i&&(i="20"),this.name=e,this.type=t,this.length=i,this.nullable=s,this.default=l,this.primaryKey=a,this.autoIncrement=n,this.values=r,this.description=o}fixColumnType(e){if(!e)return"";let t=e.match(/^(\w+)\s*\((\d+)\)$/i);if(t){let i=t[1].toLowerCase();if("boolean"===i||"bool"===i)return i.toUpperCase()}return e}toSQL(e="mysql",t=!1){let i=this.type.toLowerCase();"tinyint"==i&&1==this.length&&(i="tinyint1");let s=(DIALECT_TYPE_MAP[e]||DIALECT_TYPE_MAP.mysql)[i]||this.type;"BIGINT"==(s=this.fixColumnType(s))&&"mysql"==e&&(this.length="20");let l=["enum","set"].includes(i),a=["numeric","decimal","double","float"].includes(i),n=["varchar","char","binary","varbinary","bit","tinyint","smallint","mediumint","int","bigint"].includes(i),r=`${this.name} ${s}`;if(l&&this.values){let o=this.values.split(",").map(e=>`'${e.trim()}'`).join(", ");"mysql"===e&&(r=`${this.name} ${s}(${o})`)}else if(a&&this.values){let T=this.values.split(",").map(e=>e.trim()).filter(e=>/^\d+$/.test(e)).join(", ");T&&(r+=`(${T})`)}else n&&this.length&&("sqlite"==e&&this.primaryKey&&this.autoIncrement&&-1!==this.type.toLowerCase().indexOf("int")?r+="":r+=`(${this.length})`);return this.primaryKey?t?r+=" NOT NULL":r+=" NOT NULL PRIMARY KEY":r+=this.nullable?" NULL":" NOT NULL",this.autoIncrement&&("mysql"===e?r+=" AUTO_INCREMENT":"postgresql"===e?r=`${this.name} SERIAL`:"sqlite"===e?r+=" AUTOINCREMENT":"sqlserver"===e&&(r+=" IDENTITY(1,1)")),this.hasDefault()&&(this.isTypeBoolean(this.type,this.length)?r+=` DEFAULT ${this.toBoolean(this.default,e)}`:this.isTypeNumeric(this.type,Object.values(DIALECT_TYPE_MAP[e]))&&!isNaN(this.default)?r+=` DEFAULT ${this.default}`:isNaN(this.default)?r+="":r+=` DEFAULT ${this.fixDefaultColumnValue(this.default,e)}`),r}toNumeric(e){let t=e;return""==(t=(t=t.replace(/^"(.*)"$/,"$1")).replace(/^'(.*)'$/,"$1"))?"0":t}isTypeNumeric(e,t){return t.includes(e.toUpperCase())}fixDefaultColumnValue(e,t){return e?-1!=e.toUpperCase().indexOf("NULL")?e="NULL":this.isNumber(e)?e="'"+e.toString()+"'":/^(CURRENT_TIMESTAMP|NOW\(\))$/i.test(e)?e=e.toUpperCase():e.startsWith("'")&&e.endsWith("'")&&/\d{4}-\d{2}-\d{2}/.test(e.slice(1,-1))?e="'"+e.slice(1,-1)+"'":/\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}/.test(e)?e="'"+e+"'":/\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d{6}/.test(e)?e="'"+e+"'":/^(TRUE|FALSE)$/i.test(e)?e=e.toUpperCase():/^CURRENT_TIMESTAMP\s+ON\s+UPDATE\s+CURRENT_TIMESTAMP$/i.test(e)?e=e.toUpperCase():/^CURRENT_TIMESTAMP\s+ON\s+INSERT\s+CURRENT_TIMESTAMP$/i.test(e)?e=e.toUpperCase():this.isInQuotes(e)&&(e="'"+e.slice(1,-1)+"'"):e=null,e}isInQuotes(e){return e.startsWith("'")&&e.endsWith("'")}isNumber(e){return!isNaN(e)&&""!==e}toBoolean(e,t){let i="string"==typeof e?e.trim().toLowerCase():String(e).toLowerCase(),s="true"===i||"1"===i||0!==parseInt(i),l=["sqlite","sqlserver"].includes(t.toLowerCase());return l?s?"1":"0":s?"TRUE":"FALSE"}fixDefaultValue(e,t,i){let s=e;return this.isTypeBoolean(t,i)?s=0!=e&&"true"===e.toString().toLowerCase()?"true":"false":this.isNativeValue(e)?s=e:this.isTypeText(t)?s=`'${e.replace(/'/g,"\\'")}'`:this.isTypeInteger(t)?s=parseInt(e.replace(/[^\d]/g,""),10):this.isTypeFloat(t)&&(s=parseFloat(e.replace(/[^\d.]/g,""))),s}isTypeBoolean(e,t){return"boolean"===e.toLowerCase()||"bool"===e.toLowerCase()||"bit"===e.toLowerCase()||"tinyint"===e.toLowerCase()&&1==t}isNativeValue(e){return"true"===e.toLowerCase()||"false"===e.toLowerCase()||"null"===e.toLowerCase()}isTypeText(e){return["char","varchar","text","tinytext","mediumtext","longtext","enum","set"].includes(e.toLowerCase())}isTypeInteger(e){return["tinyint","smallint","mediumint","int","bigint","integer"].includes(e.toLowerCase())}isTypeFloat(e){return["float","double","decimal","numeric"].includes(e.toLowerCase())}isTypeDate(e){return["date","datetime","timestamp","time","year"].includes(e.toLowerCase())}isTypeBinary(e){return["blob","tinyblob","mediumblob","longblob"].includes(e.toLowerCase())}hasRange(e){return e.includes(this.type)&&this.values}hasValue(e){return e.includes(this.type)&&this.values}hasLength(e){return this.length&&e.includes(this.type)}hasDefault(){return this.default&&"null"!==this.default.toLowerCase()}}