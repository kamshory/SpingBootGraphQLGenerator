class GraphQLSchemaUtils{static reservedTypes=["String","Int","Float","Boolean","ID"];static toSnakeCase(e){return e.replace(/([A-Z])/g,(e,t,a)=>(a>0?"_":"")+t.toLowerCase())}static toCamelCase(e){return e.replace(/_([a-z])/g,(e,t)=>t.toUpperCase())}static normalizeNameForComparison(e){return e.replace(/[_\s]/g,"").toLowerCase()}static normalizeEntity(e,t="snake"){let a={};for(let[n,r]of Object.entries(e)){let i=n;"snake"===t?i.includes("_")||(i=this.toSnakeCase(i)):"camel"===t&&i.includes("_")&&(i=this.toCamelCase(i)),a[i]=r.map(a=>{let{name:n,type:r,nullable:i}=a;if(!this.reservedTypes.includes(r)){let l=r;/id$/i.test(n)||(n=this.normalizeNameForComparison(n)===this.normalizeNameForComparison(l)?n+"Id":n);let o=e[l];if(o){let s=o.find(e=>this.normalizeNameForComparison(e.name)===this.normalizeNameForComparison(n));s&&(r=s.type)}}let m=n.includes("_");return"camel"===t?m&&(n=this.toCamelCase(n)):"snake"===t&&!m&&/[a-z][A-Z]/.test(n)&&(n=this.toSnakeCase(n)),"ID"===r&&(r="String"),{name:n,type:r,nullable:i}})}return a}static parseGraphQLSchema(e){let t={types:{},inputs:{}},a=/(type|input)\s+(\w+)\s*\{([\s\S]*?)\}/g,n;for(;null!==(n=a.exec(e));){let r=n[1],i=n[2],l=n[3];if("Query"===i)continue;let o=[],s=/(\w+):\s*([\w!]+)/g,m;for(;null!==(m=s.exec(l));){let p=m[1],u=m[2],c=u.endsWith("!");c&&(u=u.slice(0,-1)),o.push({name:p,type:u,nullable:!c})}"type"===r?t.types[i]=o:"input"===r&&(t.inputs[i]=o)}return t}static buildGraphQLSchema(e,t=!0){let a={CHAR:"String",VARCHAR:"String",TEXT:"String",LONGTEXT:"String",INT:"Int",INTEGER:"Int",BIGINT:"Int",SMALLINT:"Int",TINYINT:"Boolean",DECIMAL:"Float",NUMERIC:"Float",FLOAT:"Float",DOUBLE:"Float",REAL:"Float",BOOLEAN:"Boolean",DATE:"String",DATETIME:"String",TIMESTAMP:"String",TIME:"String",ENUM:"String",SET:"String"},n=e=>e.replace(/_([a-z])/g,(e,t)=>t.toUpperCase()),r=e=>{let t=n(e);return t.charAt(0).toUpperCase()+t.slice(1)},i=`# GraphQL Schema generated by GraphQL Generator

`;return e.forEach(l=>{i+=`
type ${r(l.name)} {
`;let o=l.columns.filter(e=>e.primaryKey),s=o.length>1;l.columns.forEach(o=>{let m=!1,p=!1;if(m&&!o.nullable&&(p=!0),s&&o.primaryKey&&(p=!0),o.primaryKey&&(p=!0),o.primaryKey||m||o.nullable||(p=!0),o.name.endsWith("_id")){let u=o.name.slice(0,-3),c=e.find(e=>e.name.toLowerCase()===u.toLowerCase());if(c&&c.name.toLowerCase()!==l.name.toLowerCase()){let y=r(c.name),g=n(c.name);i+=`    ${g}: ${y}${o.nullable?"":"!"}
`,m=!0}}if(!(t&&m)){let h;h=o.primaryKey?"ID":a[o.type.toUpperCase()]||"String",p&&(h+="!"),i+=`    ${n(o.name)}: ${h}
`}}),i+=`}
`}),e.forEach(t=>{i+=`
input ${r(t.name)+"Input"} {
`;let l=t.columns.filter(e=>e.primaryKey),o=l.length>1;t.columns.forEach(r=>{let l=r.name.endsWith("_id")&&e.some(e=>e.name.toLowerCase()===r.name.slice(0,-3).toLowerCase()&&e.name.toLowerCase()!==t.name.toLowerCase()),s;s=r.primaryKey||l?"ID":a[r.type.toUpperCase()]||"String";let m=o&&r.primaryKey||l&&!r.nullable||!r.primaryKey&&!l&&!r.nullable;m&&(s+="!"),i+=`    ${n(r.name)}: ${s}
`}),i+=`}
`}),i+=`
input DataFilter{
    fieldName: String,
    fieldValue: String
}
`,i+=`
input DataOrder{
    fieldName: String,
    orderType: String
}
`,i+=`
type Query {
`,e.forEach(e=>{let t=r(e.name),a=n(e.name),l=e.columns.filter(e=>e.primaryKey);if(l.length>0){let o=l.map(e=>{let t=n(e.name);return`${t}: ID`}).join(", "),s=`get${t}`;i+=`    ${s}(${o}): ${t}
`}let m=`${a}s`,p=`get${r(m)}`;i+=`    ${p}(pageNumber: Int, pageSize: Int, dataFilter: [DataFilter], dataOrder: [DataOrder]): [${t}]
`}),i+=`}
`,i+=`
type Mutation {
`,e.forEach(e=>{let t=r(e.name);n(e.name);let a=`${t}Input`,l=e.columns.filter(e=>e.primaryKey);if(i+=`    create${t}(input: ${a}!): ${t}
`,i+=`    update${t}(input: ${a}!): ${t}
`,l.length>0){let o=l.map(e=>`${n(e.name)}: ID!`).join(", ");i+=`    delete${t}(${o}): Boolean
`}}),i+=`}
`}}