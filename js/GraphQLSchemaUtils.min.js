class GraphQLSchemaUtils{reservedTypes=["String","Int","Float","Boolean","ID"];toSnakeCase(e){return e.replace(/([A-Z])/g,(e,t,a)=>(a>0?"_":"")+t.toLowerCase())}toCamelCase(e){return e.replace(/_([a-z])/g,(e,t)=>t.toUpperCase())}toUpperCamelCase(e){let t=this.toCamelCase(e);return t.charAt(0).toUpperCase()+t.slice(1)}normalizeNameForComparison(e){return e.replace(/[_\s]/g,"").toLowerCase()}normalizeEntity(e,t="snake"){let a={};for(let[n,r]of Object.entries(e)){let o=n;"snake"===t?o.includes("_")||(o=this.toSnakeCase(o)):"camel"===t&&o.includes("_")&&(o=this.toCamelCase(o)),a[o]=r.map(a=>{let{name:n,type:r,nullable:o}=a;if(!this.reservedTypes.includes(r)){let l=r;/id$/i.test(n)||(n=this.normalizeNameForComparison(n)===this.normalizeNameForComparison(l)?n+"Id":n);let i=e[l];if(i){let s=i.find(e=>this.normalizeNameForComparison(e.name)===this.normalizeNameForComparison(n));s&&(r=s.type)}}let m=n.includes("_");return"camel"===t?m&&(n=this.toCamelCase(n)):"snake"===t&&!m&&/[a-z][A-Z]/.test(n)&&(n=this.toSnakeCase(n)),"ID"===r&&(r="String"),{name:n,type:r,nullable:o}})}return a}parseGraphQLSchema(e){let t={types:{},inputs:{}},a=/(type|input)\s+(\w+)\s*\{([\s\S]*?)\}/g,n;for(;null!==(n=a.exec(e));){let r=n[1],o=n[2],l=n[3];if("Query"===o)continue;let i=[],s=/(\w+):\s*([\w!]+)/g,m;for(;null!==(m=s.exec(l));){let p=m[1],C=m[2],u=C.endsWith("!");u&&(C=C.slice(0,-1)),i.push({name:p,type:C,nullable:!u})}"type"===r?t.types[o]=i:"input"===r&&(t.inputs[o]=i)}return t}buildGraphQLSchema(e,t=!0,a="offset"){let n={CHAR:"String",VARCHAR:"String",TEXT:"String",LONGTEXT:"String",INT:"Int",INTEGER:"Int",BIGINT:"Int",SMALLINT:"Int",TINYINT:"Boolean",DECIMAL:"Float",NUMERIC:"Float",FLOAT:"Float",DOUBLE:"Float",REAL:"Float",BOOLEAN:"Boolean",DATE:"String",DATETIME:"String",TIMESTAMP:"String",TIME:"String",ENUM:"String",SET:"String"},r=this.toCamelCase;this.toUpperCamelCase;let o=`# GraphQL Schema generated by GraphQL Generator

`;return"cursor"===a?o+=`type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}

`:o+=`type PageInfo {
    totalCount: Int!
    totalPages: Int!
    currentPage: Int!
    pageSize: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}
    
`,e.forEach(l=>{let i=this.toUpperCamelCase(l.name);this.toCamelCase(l.name),o+=`
type ${i} {
`;let s=l.columns.filter(e=>e.primaryKey);if(s.length,l.columns.forEach(a=>{let i=!1,s=!1,m="";if(a.name.endsWith("_id")){let p=a.name.slice(0,-3),C=e.find(e=>e.name.toLowerCase()===p.toLowerCase());if(C&&C.name.toLowerCase()!==l.name.toLowerCase()){let u=this.toUpperCamelCase(C.name),g=r(C.name);m+=`    ${g}: ${u}${a.nullable?"":"!"}
`,i=!0}}if(i&&!a.nullable&&(s=!0),a.primaryKey&&(s=!0),a.primaryKey||i||a.nullable||(s=!0),!(t&&i)){let h;h=a.primaryKey?"ID":n[a.type.toUpperCase()]||"String",s&&(h+="!"),o+=`    ${r(a.name)}: ${h}
`}o+=m}),o+=`}
`,"cursor"===a){let m=`${i}Connection`,p=`${i}Edge`;o+=`
type ${m} {
    edges: [${p}]
    pageInfo: PageInfo!
}

type ${p} {
    node: ${i}
    cursor: String!
}
`}else{let C=`${i}Connection`;o+=`
type ${C} {
    pageInfo: PageInfo!
    data: [${i}]
}

`}}),e.forEach(t=>{let a=this.toUpperCamelCase(t.name)+"Create",l=this.toUpperCamelCase(t.name)+"Update",i=t.columns.filter(e=>e.primaryKey),s=i.length>1;o+=`
input ${a} {
`,t.columns.forEach(a=>{if(!a.autoIncrement){let l=a.name.endsWith("_id")&&e.some(e=>e.name.toLowerCase()===a.name.slice(0,-3).toLowerCase()&&e.name.toLowerCase()!==t.name.toLowerCase()),i;i=a.primaryKey||l?"ID":n[a.type.toUpperCase()]||"String";let m=s&&a.primaryKey||l&&!a.nullable||!a.primaryKey&&!l&&!a.nullable;m&&(i+="!"),o+=`    ${r(a.name)}: ${i}
`}}),o+=`}
`,o+=`
input ${l} {
`,t.columns.forEach(a=>{let l=a.name.endsWith("_id")&&e.some(e=>e.name.toLowerCase()===a.name.slice(0,-3).toLowerCase()&&e.name.toLowerCase()!==t.name.toLowerCase()),i;i=a.primaryKey||l?"ID":n[a.type.toUpperCase()]||"String";let m=s&&a.primaryKey||l&&!a.nullable||!a.primaryKey&&!l&&!a.nullable;m&&(i+="!"),o+=`    ${r(a.name)}: ${i}
`}),o+=`}
`}),o+=`
input DataFilter{
    fieldName: String,
    fieldValue: String
}
`,o+=`
input DataOrder{
    fieldName: String,
    orderType: String
}
`,o+=`
type Query {
`,e.forEach(e=>{let t=this.toUpperCamelCase(e.name),n=r(e.name),l=e.columns.filter(e=>e.primaryKey);if(l.length>0){let i=l.map(e=>{let t=r(e.name);return`${t}: ID`}).join(", "),s=`get${t}`;o+=`    ${s}(${i}): ${t}
`}let m=`${n}s`,p=`get${this.toUpperCamelCase(m)}`;"offset"===a?o+=`    ${p}(pageNumber: Int, pageSize: Int, dataFilter: [DataFilter], dataOrder: [DataOrder]): ${t}Connection
`:"cursor"===a&&(o+=`    ${p}(first: Int, after: String, last: Int, before: String): ${t}Connection
`)}),o+=`}
`,o+=`
type Mutation {
`,e.forEach(e=>{let t=this.toUpperCamelCase(e.name);r(e.name);let a=`${t}Create`,n=`${t}Update`,l=e.columns.filter(e=>e.primaryKey);if(o+=`    create${t}(input: ${a}!): ${t}
`,o+=`    update${t}(input: ${n}!): ${t}
`,l.length>0){let i=l.map(e=>`${r(e.name)}: ID!`).join(", ");o+=`    delete${t}(${i}): Boolean
`}}),o+=`}
`}}